{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    // Standard implementation implies an options object\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _handleServerResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Error: ${res.status}`);\n  }\n\n  getAppInfo() {\n    return Promise.all([this.getCardList(), this.getUserInfo()]);\n  }\n\n  getCardList() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._handleServerResponse);\n  }\n\n  addCard(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._handleServerResponse);\n  }\n\n  removeCard(cardID) {\n    return fetch(`${this._baseUrl}/cards/${cardID}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._handleServerResponse);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._handleServerResponse);\n  }\n\n  setUserInfo(_ref3) {\n    let {\n      name,\n      about\n    } = _ref3;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._handleServerResponse);\n  }\n\n  setUserAvatar(_ref4) {\n    let {\n      avatar\n    } = _ref4;\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._handleServerResponse);\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    // Standard implementation: 2 different methods for liking and disliking\n    return fetch(`${this._baseUrl}/cards/like/${cardID}`, {\n      method: like ? \"PUT\" : \"DELETE\",\n      headers: this._headers\n    }).then(this._handleServerResponse);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://nomoreparties.co/cohort0\",\n  headers: {\n    authorization: \"80a75492-21c5-4330-a02f-308029e94b63\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/julian1729/Documents/Practicum/web-canonicals_en/src/utils/api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_handleServerResponse","res","ok","json","Promise","reject","status","getAppInfo","all","getCardList","getUserInfo","fetch","then","addCard","name","link","method","body","JSON","stringify","removeCard","cardID","setUserInfo","about","setUserAvatar","avatar","changeLikeCardStatus","like","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    // Standard implementation implies an options object\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _handleServerResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Error: ${res.status}`);\n  }\n\n  getAppInfo() {\n    return Promise.all([this.getCardList(), this.getUserInfo()]);\n  }\n\n  getCardList() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then(this._handleServerResponse);\n  }\n\n  addCard({ name, link }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link,\n      }),\n    }).then(this._handleServerResponse);\n  }\n\n  removeCard(cardID) {\n    return fetch(`${this._baseUrl}/cards/${cardID}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._handleServerResponse);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then(this._handleServerResponse);\n  }\n\n  setUserInfo({ name, about }) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about,\n      }),\n    }).then(this._handleServerResponse);\n  }\n\n  setUserAvatar({ avatar }) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar,\n      }),\n    }).then(this._handleServerResponse);\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    // Standard implementation: 2 different methods for liking and disliking\n    return fetch(`${this._baseUrl}/cards/like/${cardID}`, {\n      method: like ? \"PUT\" : \"DELETE\",\n      headers: this._headers,\n    }).then(this._handleServerResponse);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://nomoreparties.co/cohort0\",\n  headers: {\n    authorization: \"80a75492-21c5-4330-a02f-308029e94b63\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}